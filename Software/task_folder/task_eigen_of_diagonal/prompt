#taskdescription
Write a function, that for has a matrix as an argument and: 
1. Removes all the values but diagonal (**np.diag()** can be helpful here)
2. Computes eigenvalues and eigenvectors of the new diagonal matrix (**np.linalg.eig()** is worth checking out)
The NumPy linear algebra subpackage (numpy.linalg) provide efficient low level implementations of standard linear algebra algorithms. 
#filename
example_solution.py
#functionname
eigen_of_diagonal(matrix)
#testexamples
input_matrix1 = np.array([[4, -2, 0],
                        [1,  1, 0],
                        [0,  0, 2]])
eigenvalues1, eigenvectors1 = eigen_of_diagonal(input_matrix1)
expected_eigenvalues1 = np.array([4, 1, 2])
expected_eigenvectors1 = np.array([[1, 0, 0],
                                  [0, 1, 0],
                                  [0, 0, 1]])
assert np.allclose(eigenvalues1, expected_eigenvalues1), "Test case 1 (eigenvalues) failed"
assert np.allclose(eigenvectors1, expected_eigenvectors1), "Test case 1 (eigenvectors) failed"



