#taskdescription
For 2 input 2D arrays (matrices), please write a function, that will be returning the results of the sum of the elements in the left bottom corner of the matrices, and then thoose of the right top corner. 
Entries can be accessed with the indexes. The indexation starts from [0] and can be applied to all the axises of the target array. 
#filename
example_solution.py
#functionname
get_corner_sums(array1, array2)
#testexamples
array1 = np.array([[1, 2, 3],
                   [4, 5, 6]])
array2 = np.array([[7, 8, 9],
                   [10, 11, 12]])
result = get_corner_sums(array1, array2)
expected_result = (14, 12)
assert result == expected_result, "It seems that the sum is not calculated correctly."

array3 = np.array([[1, 2, 3],
                   [4, 5, 6]])
array4 = np.array([[7, 8, 9, 10],
                   [11, 12, 13, 14]])
result2 = get_corner_sums(array3, array4)
expected_result2 = (15, 13)
assert result2 == expected_result2, "It seems that the case of matrices of different sizes is not accounted for."
